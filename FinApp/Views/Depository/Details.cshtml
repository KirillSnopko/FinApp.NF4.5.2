@model FinApp.Entities.Finance.Depository

@{
    ViewBag.Title = "Details";
}


<div>
    <h2 class="d-inline p-2">@Model.name</h2>
    @if (Model.amount < 20)
    {
        <span class="badge badge-danger">@Model.amount @Model.typeMoney</span>
    }
    else
    {
        <span class="badge badge-primary">@Model.amount @Model.typeMoney</span>
    }
</div>


<div class="dropdown">
    <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Settings
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#rename">Rename</a>
        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#operation">New operation</a>
        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#delete">Delete</a>
    </div>
</div>


<div class="row">
    <div class="col">
        <span class="badge badge-primary">Current month</span>
        <div id="history"></div>
    </div>
    <div class="col">
        <span class="badge badge-primary">Current month</span>
        <div id="doughnut">
            <canvas id="myChartDoughnut" width="500" height="500"></canvas>
        </div>
    </div>
</div>
<br />
<div id="history" class="collapse"></div>

<script>
    const labelsDoughnut = [];
    const dataDoughnut = [];

    $(window).on('load', function () {

        $.get("../HistoryById/@Model.id", {},
            function (history) {
                var table = $('<table class="table"><tr><th>Date</th><th>Category</th><th>Comment</th><th>Value</th></tr>');
               $(history).each(function (index, item) {

                   var amountOfMoney = item.amountOfMoney;
                   var category = item.category;
                   switch (category) {
                       case 0:
                           category = "Home";
                           break;
                       case 1:
                           category = "Repair";
                           break;
                       case 2:
                           category = "Supermarkets";
                           break;
                       case 3:
                           category = "Pharmacy";
                           break;
                       case 4:
                           category = "Entertaiment";
                           break;
                       case 5:
                           category = "Transport";
                           break;
                       case 6:
                           category = "Clothing";
                           break;
                       case 6:
                           category = "Electronics";
                           break;
                       default:
                           category = "Others";
                           break;
                   }
                   var comment = item.comment;
                   var date = new Date(parseInt(item.created.substr(6)));
                   var isSpending = item.isSpending;
                   if (isSpending) {
                       table.append('<tr class="table-danger"><td>' + date + '</td><td>' + category + '</td><td>' + comment + '</td><td><strong> -' + amountOfMoney + '</strong>@Model.typeMoney</td ></tr >');
                   } else {
                       table.append('<tr class="table-success"><td>' + date + '</td><td>' + category + '</td><td>' + comment + '</td><td><strong> +' + amountOfMoney + '</strong>@Model.typeMoney</td ></tr >');
                   }
               });
                table.append('</table>');
                $('#history').html(table);
            }
        );
        $.get("/api/Charts/Doughnut/CurrentMonth/@Model.id", {},
            function (data) {

                for (var i = 0; i < data.length; i++) {
                    labelsDoughnut.push(data[i].Category);
                    dataDoughnut.push(data[i].Sum);
                }

                new Chart(myChartDoughnut, {
                    type: 'doughnut',
                    data: {
                        labels: labelsDoughnut,
                        datasets: [{
                            label: '# of Tomatoes',
                            data: dataDoughnut,
                            backgroundColor: [
                                'rgba(255, 99, 132)',
                                'rgba(54, 162, 235)',
                                'rgba(255, 206, 86)',
                                'rgba(75, 192, 192)',
                                'rgba(102, 54, 255)',
                                'rgba(46, 85, 183)',
                                'rgba(190, 30, 80)',
                                'rgba(190, 30, 199)',
                                'rgba(26, 15, 49)'

                            ],
                            borderColor: [
                                'rgba(255, 99, 132,1)',
                                'rgba(54, 162, 235,1)',
                                'rgba(255, 206, 86,1)',
                                'rgba(75, 192, 192,1)',
                                'rgba(102, 54, 255,1)',
                                'rgba(46, 85, 183,1)',
                                'rgba(190, 30, 80,1)',
                                'rgba(190, 30, 199,1)',
                                'rgba(26, 15, 49,1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        //cutoutPercentage: 40,
                        responsive: false,

                    }
                });

            });
     })



</script>




<!-- Rename -->
<div class="modal fade" id="rename" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">

                <h4 class="modal-title">New name</h4>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()


                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.id)

                    <div class="form-group">
                        <div class="col-xs-2">
                            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10" style="display: flex;">
                            <input type="submit" value="Save" class="btn btn-success" formaction="../Rename" />
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!--  (idDepository=.., isSpending=.., amountOfMoney=.., comment=.., category)-->
<div class="modal fade" id="operation" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">

                <h4 class="modal-title">New financial operation</h4>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <!--idDepository-->
                    <input type="hidden" name="idDepository" value="@Model.id" />
                    <!--amount of money-->
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">$</span>
                            <span class="input-group-text">0.00</span>
                        </div>
                        <input type="text" class="form-control" placeholder="" name="amountOfMoney">
                    </div>



                    <!--Comment for operation-->
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Text</span>
                        </div>
                        <input type="text" class="form-control" placeholder="Enter comment" name="comment">
                    </div>
                    <!--choosing between adding and spending-->
                    <div class="custom-control custom-radio custom-control-inline">
                        <input type="radio" class="custom-control-input" id="customRadio" name="isSpending" value="false" checked>
                        <label class="custom-control-label" for="customRadio">Add</label>
                    </div>

                    if (Model.amount > 5)
                    {
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" class="custom-control-input" id="customRadio2" name="isSpending" value="true" data-toggle="collapse" data-target="#category" aria-expanded="false" aria-controls="category">
                            <label class="custom-control-label" for="customRadio2">Spend</label>
                        </div>
                    }

                    <!--Category-->
                    <div class="form-group collapse" id="category">
                        <label for="exampleFormControlSelect1">Category </label>
                        <select class="form-control" id="exampleFormControlSelect1" name="category">
                            <option>Home</option>
                            <option>Repair</option>
                            <option>Supermarkets</option>
                            <option>Pharmacy</option>
                            <option>Entertainment</option>
                            <option>Transport</option>
                            <option>Clothing</option>
                            <option>Electronics</option>
                            <option>Others</option>
                        </select>
                    </div>
                    <br />
                    <br />
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10" style="display: flex;">
                            <input type="submit" value="Push" class="btn btn-success" formaction="../Change" />
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                In stock @Model.amount @Model.typeMoney
            </div>
        </div>
    </div>
</div>

<!-- Delete -->
<div class="modal fade" id="delete" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">

                <strong class="modal-title">Please, confirm this action.</strong>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="idDepository" value="@Model.id" />
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10" style="display: flex;">
                            <input type="submit" value="Confirm" class="btn btn-danger" formaction="../Delete" />
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>










